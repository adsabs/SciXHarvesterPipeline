versions pytest-7.3.1, python-3.9.6.final.0
cwd=/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline
args=('-s', 'SciXHarvester/tests/', '--debug=trace')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x101697d00>
    pytest_plugin_registered [hook]
        plugin: <Session SciXHarvesterPipeline exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x101697d00>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x103b99220>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x103b993a0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101697d00>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_redis.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_redis/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cookies.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cookies/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x102045550>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x103b99220>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x103b993a0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x103ba2640>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x103bb96a0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101697d00>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_redis.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_redis/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cookies.plugin' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cookies/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x102045550>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x103b99220>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x103b993a0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x103ba2640>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x103bb96a0>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x103bd8130>
          manager: <_pytest.config.PytestPluginManager object at 0x10163cbe0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x101697d00>
          start_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline
          startdir: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline
      finish pytest_report_header --> [['asyncio: mode=strict'], ['rootdir: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline', 'configfile: pyproject.toml', 'plugins: asyncio-0.21.0, redis-3.0.2, mock-3.6.1, cov-4.0.0, cookies-0.6.1'], 'cachedir: .tmp', ['using: pytest-7.3.1', 'setuptools registered plugins:', '  pytest-asyncio-0.21.0 at /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_asyncio/plugin.py', '  pytest-redis-3.0.2 at /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_redis/plugin.py', '  pytest-mock-3.6.1 at /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_mock/__init__.py', '  pytest-cov-4.0.0 at /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cov/plugin.py', '  pytest-cookies-0.6.1 at /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest_cookies/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['SciXHarvester/tests/'] [collection]
        pytest_collectstart [hook]
            collector: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (PosixPath('/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests'), []) [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/__init__.py
              finish pytest_pycollect_makemodule --> <Package SciXHarvester> [hook]
            finish pytest_collect_file --> [<Package SciXHarvester>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/base.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/base.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/base.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/base.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/API/test_avro_serializer.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/API/test_avro_serializer.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/API/test_harvester_client.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/API/test_harvester_client.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/API/test_harvester_server.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/API/test_harvester_server.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common/mockschemaregistryclient.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common/mockschemaregistryclient.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common/mockschemaregistryclient.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/common/mockschemaregistryclient.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/.coverage
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/.coverage
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/.coverage
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/.coverage
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/harvester/test_alembic.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/harvester/test_alembic.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/harvester/test_harvester.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/harvester/test_harvester.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
                  path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py
              finish pytest_pycollect_makemodule --> <Module SciXHarvester/tests/harvester/test_s3.py> [hook]
            finish pytest_collect_file --> [<Module SciXHarvester/tests/harvester/test_s3.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/config.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/config.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/config.py
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/config.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterInputSchema.avsc
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterInputSchema.avsc
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterInputSchema.avsc
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterInputSchema.avsc
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterOutputSchema.avsc
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterOutputSchema.avsc
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterOutputSchema.avsc
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/AVRO_schemas/HarvesterOutputSchema.avsc
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/arxiv_retry_after.html
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/arxiv_retry_after.html
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/arxiv_retry_after.html
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/arxiv_retry_after.html
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/GetRecord_data.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/GetRecord_data.xml
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/GetRecord_data.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/GetRecord_data.xml
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListIdentifiers_data.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListIdentifiers_data.xml
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListIdentifiers_data.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListIdentifiers_data.xml
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_0.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_0.xml
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_0.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_0.xml
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_1.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_1.xml
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_1.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_1.xml
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_2.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_2.xml
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_2.xml
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/ListRecords_data_2.xml
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101697d00>
                collection_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/parsed_records.pkl
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/parsed_records.pkl
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/parsed_records.pkl
                path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/stubdata/arxiv/metadata/parsed_records.pkl
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=8 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=8 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/API/test_avro_serializer.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
      find_module called for: test_avro_serializer [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_avro_serializer.py [assertion]
      early skip of rewriting module: API [assertion]
      early skip of rewriting module: API.avro_serializer [assertion]
      early skip of rewriting module: avro [assertion]
      early skip of rewriting module: avro.io [assertion]
      early skip of rewriting module: avro.constants [assertion]
      early skip of rewriting module: avro.errors [assertion]
      early skip of rewriting module: avro.schema [assertion]
      early skip of rewriting module: avro.name [assertion]
      early skip of rewriting module: avro.timezones [assertion]
      find_module called for: tests [assertion]
      early skip of rewriting module: tests.API [assertion]
      early skip of rewriting module: tests.API.base [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: json
            obj: <module 'json' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: avro_serializer
            obj: <module 'API.avro_serializer' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/API/avro_serializer.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: mock_gRPC_avro_msg
            obj: <class 'tests.API.base.mock_gRPC_avro_msg'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_avro_serializer.py>
            name: TestAvroSerializer
            obj: <class 'test_avro_serializer.TestAvroSerializer'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAvroSerializer> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestAvroSerializer> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAvroSerializer>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAvroSerializer>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_avro_deserialization> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_avro_deserialization>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_avro_serialization> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_avro_serialization>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_avro_serializer.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/API/test_harvester_client.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
      find_module called for: test_harvester_client [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py' [assertion]
      _read_pyc(/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py): out of date [assertion]
      rewriting PosixPath('/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_client.py') [assertion]
      early skip of rewriting module: confluent_kafka [assertion]
      early skip of rewriting module: confluent_kafka.deserializing_consumer [assertion]
      early skip of rewriting module: confluent_kafka.cimpl [assertion]
      early skip of rewriting module: confluent_kafka.error [assertion]
      early skip of rewriting module: confluent_kafka.serialization [assertion]
      early skip of rewriting module: confluent_kafka.serializing_producer [assertion]
      early skip of rewriting module: confluent_kafka.schema_registry [assertion]
      early skip of rewriting module: confluent_kafka.schema_registry.schema_registry_client [assertion]
      early skip of rewriting module: confluent_kafka.schema_registry.error [assertion]
      early skip of rewriting module: fastavro [assertion]
      early skip of rewriting module: fastavro.read [assertion]
      early skip of rewriting module: fastavro._read [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: fastavro.logical_readers [assertion]
      early skip of rewriting module: fastavro._logical_readers [assertion]
      early skip of rewriting module: fastavro.const [assertion]
      early skip of rewriting module: fastavro._schema [assertion]
      early skip of rewriting module: fastavro.repository [assertion]
      early skip of rewriting module: fastavro.repository.base [assertion]
      early skip of rewriting module: fastavro.repository.flat_dict [assertion]
      early skip of rewriting module: fastavro._schema_common [assertion]
      early skip of rewriting module: fastavro._read_common [assertion]
      early skip of rewriting module: snappy [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: lz4 [assertion]
      early skip of rewriting module: fastavro.json_read [assertion]
      early skip of rewriting module: fastavro._read_py [assertion]
      early skip of rewriting module: fastavro.io [assertion]
      early skip of rewriting module: fastavro.io.binary_decoder [assertion]
      early skip of rewriting module: fastavro.io.json_decoder [assertion]
      early skip of rewriting module: fastavro.io.parser [assertion]
      early skip of rewriting module: fastavro.io.symbols [assertion]
      early skip of rewriting module: fastavro.schema [assertion]
      early skip of rewriting module: fastavro.types [assertion]
      early skip of rewriting module: snappy [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: lz4 [assertion]
      early skip of rewriting module: fastavro.write [assertion]
      early skip of rewriting module: fastavro._write [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: fastavro._logical_writers [assertion]
      early skip of rewriting module: fastavro._validation [assertion]
      early skip of rewriting module: fastavro._validate_common [assertion]
      early skip of rewriting module: fastavro._write_common [assertion]
      early skip of rewriting module: snappy [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: lz4 [assertion]
      early skip of rewriting module: fastavro.json_write [assertion]
      early skip of rewriting module: fastavro._write_py [assertion]
      early skip of rewriting module: fastavro.io.binary_encoder [assertion]
      early skip of rewriting module: fastavro.io.json_encoder [assertion]
      early skip of rewriting module: fastavro.validation [assertion]
      early skip of rewriting module: fastavro.logical_writers [assertion]
      early skip of rewriting module: snappy [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: lz4 [assertion]
      early skip of rewriting module: API.harvester_client [assertion]
      early skip of rewriting module: grpc [assertion]
      early skip of rewriting module: grpc._compression [assertion]
      early skip of rewriting module: grpc._cython [assertion]
      early skip of rewriting module: grpc._cython.cygrpc [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: grpc._cython.logging [assertion]
      early skip of rewriting module: grpc._cython.os [assertion]
      early skip of rewriting module: grpc._cython.sys [assertion]
      early skip of rewriting module: grpc._cython.threading [assertion]
      early skip of rewriting module: grpc._cython.time [assertion]
      early skip of rewriting module: grpc._cython.grpc [assertion]
      early skip of rewriting module: grpc._cython.asyncio [assertion]
      early skip of rewriting module: grpc._cython.collections [assertion]
      early skip of rewriting module: grpc._cython.pkgutil [assertion]
      early skip of rewriting module: grpc._cython.atexit [assertion]
      early skip of rewriting module: grpc._cython.errno [assertion]
      early skip of rewriting module: grpc._cython.sys [assertion]
      early skip of rewriting module: grpc._cython.contextvars [assertion]
      early skip of rewriting module: grpc._cython.contextvars [assertion]
      early skip of rewriting module: grpc._cython.socket [assertion]
      early skip of rewriting module: grpc._cython.enum [assertion]
      early skip of rewriting module: grpc._cython.inspect [assertion]
      early skip of rewriting module: grpc._cython.traceback [assertion]
      early skip of rewriting module: grpc._cython.functools [assertion]
      early skip of rewriting module: grpc._runtime_protos [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: grpc._grpcio_metadata [assertion]
      early skip of rewriting module: grpc_tools [assertion]
      early skip of rewriting module: grpc_health [assertion]
      early skip of rewriting module: grpc_reflection [assertion]
      early skip of rewriting module: grpc.aio [assertion]
      early skip of rewriting module: grpc.aio._base_call [assertion]
      early skip of rewriting module: grpc.aio._metadata [assertion]
      early skip of rewriting module: grpc.aio._typing [assertion]
      early skip of rewriting module: grpc.aio._base_channel [assertion]
      early skip of rewriting module: grpc.aio._base_server [assertion]
      early skip of rewriting module: grpc.aio._call [assertion]
      early skip of rewriting module: grpc._common [assertion]
      early skip of rewriting module: grpc.aio._channel [assertion]
      early skip of rewriting module: grpc.aio._interceptor [assertion]
      early skip of rewriting module: grpc.aio._utils [assertion]
      early skip of rewriting module: grpc.aio._server [assertion]
      early skip of rewriting module: SciXHarvester [assertion]
      early skip of rewriting module: SciXHarvester.API [assertion]
      early skip of rewriting module: SciXHarvester.API.grpc_modules [assertion]
      early skip of rewriting module: SciXHarvester.API.grpc_modules.harvester_grpc [assertion]
      early skip of rewriting module: SciXHarvester.API.avro_serializer [assertion]
      early skip of rewriting module: tests.common [assertion]
      early skip of rewriting module: tests.common.mockschemaregistryclient [assertion]
      early skip of rewriting module: confluent_kafka.avro [assertion]
      early skip of rewriting module: confluent_kafka.avro.error [assertion]
      early skip of rewriting module: confluent_kafka.avro.load [assertion]
      early skip of rewriting module: confluent_kafka.avro.cached_schema_registry_client [assertion]
      early skip of rewriting module: confluent_kafka.avro.serializer [assertion]
      early skip of rewriting module: confluent_kafka.avro.serializer.message_serializer [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: logging
            obj: <module 'logging' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: pytest
            obj: <module 'pytest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: Schema
            obj: <class 'confluent_kafka.schema_registry.schema_registry_client.Schema'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: Logging
            obj: <class 'API.harvester_client.Logging'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: get_schema
            obj: <function get_schema at 0x103e6f550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: input_parser
            obj: <function input_parser at 0x10406e280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: output_message
            obj: <function output_message at 0x10406e310>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: MockSchemaRegistryClient
            obj: <class 'tests.common.mockschemaregistryclient.MockSchemaRegistryClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_client.py>
            name: TestHarvesterClient
            obj: <class 'test_harvester_client.TestHarvesterClient'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestHarvesterClient> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestHarvesterClient> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestHarvesterClient>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestHarvesterClient>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_get_schema> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_schema_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_schema_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_input_parser> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_input_parser>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_client.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/API/test_harvester_server.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
      find_module called for: test_harvester_server [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/test_harvester_server.py [assertion]
      early skip of rewriting module: mock [assertion]
      early skip of rewriting module: mock.mock [assertion]
      early skip of rewriting module: mock.backports [assertion]
      early skip of rewriting module: unittest.async_case [assertion]
      early skip of rewriting module: API.grpc_modules [assertion]
      early skip of rewriting module: API.grpc_modules.harvester_grpc [assertion]
      early skip of rewriting module: API.harvester_server [assertion]
      early skip of rewriting module: confluent_kafka.schema_registry.avro [assertion]
      early skip of rewriting module: sqlalchemy [assertion]
      early skip of rewriting module: sqlalchemy.util [assertion]
      early skip of rewriting module: sqlalchemy.util._collections [assertion]
      early skip of rewriting module: sqlalchemy.util.compat [assertion]
      early skip of rewriting module: sqlalchemy.util.deprecations [assertion]
      early skip of rewriting module: sqlalchemy.util.langhelpers [assertion]
      early skip of rewriting module: sqlalchemy.exc [assertion]
      early skip of rewriting module: sqlalchemy.inspection [assertion]
      early skip of rewriting module: sqlalchemy.schema [assertion]
      early skip of rewriting module: sqlalchemy.sql [assertion]
      early skip of rewriting module: sqlalchemy.sql.expression [assertion]
      early skip of rewriting module: sqlalchemy.sql.base [assertion]
      early skip of rewriting module: sqlalchemy.sql.visitors [assertion]
      early skip of rewriting module: sqlalchemy.sql.dml [assertion]
      early skip of rewriting module: sqlalchemy.sql.elements [assertion]
      early skip of rewriting module: sqlalchemy.sql.operators [assertion]
      early skip of rewriting module: sqlalchemy.sql.type_api [assertion]
      early skip of rewriting module: sqlalchemy.sql.annotation [assertion]
      early skip of rewriting module: sqlalchemy.sql.selectable [assertion]
      early skip of rewriting module: sqlalchemy.sql.functions [assertion]
      early skip of rewriting module: sqlalchemy.sql.schema [assertion]
      early skip of rewriting module: sqlalchemy.sql.ddl [assertion]
      early skip of rewriting module: sqlalchemy.event [assertion]
      early skip of rewriting module: sqlalchemy.event.api [assertion]
      early skip of rewriting module: sqlalchemy.event.base [assertion]
      early skip of rewriting module: sqlalchemy.event.attr [assertion]
      early skip of rewriting module: sqlalchemy.event.legacy [assertion]
      early skip of rewriting module: sqlalchemy.event.registry [assertion]
      early skip of rewriting module: sqlalchemy.util.topological [assertion]
      early skip of rewriting module: sqlalchemy.sql.sqltypes [assertion]
      early skip of rewriting module: sqlalchemy.processors [assertion]
      early skip of rewriting module: sqlalchemy.cprocessors [assertion]
      early skip of rewriting module: sqlalchemy.sql.util [assertion]
      early skip of rewriting module: sqlalchemy.sql.default_comparator [assertion]
      early skip of rewriting module: sqlalchemy.sql.naming [assertion]
      early skip of rewriting module: sqlalchemy.events [assertion]
      early skip of rewriting module: sqlalchemy.engine [assertion]
      early skip of rewriting module: sqlalchemy.engine.strategies [assertion]
      early skip of rewriting module: sqlalchemy.engine.base [assertion]
      early skip of rewriting module: sqlalchemy.engine.interfaces [assertion]
      early skip of rewriting module: sqlalchemy.sql.compiler [assertion]
      early skip of rewriting module: sqlalchemy.sql.crud [assertion]
      early skip of rewriting module: sqlalchemy.engine.util [assertion]
      early skip of rewriting module: sqlalchemy.cutils [assertion]
      early skip of rewriting module: sqlalchemy.interfaces [assertion]
      early skip of rewriting module: sqlalchemy.log [assertion]
      early skip of rewriting module: sqlalchemy.engine.threadlocal [assertion]
      early skip of rewriting module: sqlalchemy.engine.url [assertion]
      early skip of rewriting module: sqlalchemy.dialects [assertion]
      early skip of rewriting module: sqlalchemy.pool [assertion]
      early skip of rewriting module: sqlalchemy.pool.base [assertion]
      early skip of rewriting module: sqlalchemy.pool.dbapi_proxy [assertion]
      early skip of rewriting module: sqlalchemy.pool.impl [assertion]
      early skip of rewriting module: sqlalchemy.util.queue [assertion]
      early skip of rewriting module: sqlalchemy.engine.result [assertion]
      early skip of rewriting module: sqlalchemy.cresultproxy [assertion]
      early skip of rewriting module: sqlalchemy.types [assertion]
      early skip of rewriting module: sqlalchemy.engine.default [assertion]
      early skip of rewriting module: sqlalchemy.engine.reflection [assertion]
      early skip of rewriting module: sqlalchemy.orm [assertion]
      early skip of rewriting module: sqlalchemy.orm.exc [assertion]
      early skip of rewriting module: sqlalchemy.orm.mapper [assertion]
      early skip of rewriting module: sqlalchemy.orm.attributes [assertion]
      early skip of rewriting module: sqlalchemy.orm.collections [assertion]
      early skip of rewriting module: sqlalchemy.orm.base [assertion]
      early skip of rewriting module: sqlalchemy.orm.interfaces [assertion]
      early skip of rewriting module: sqlalchemy.orm.path_registry [assertion]
      early skip of rewriting module: sqlalchemy.orm.instrumentation [assertion]
      early skip of rewriting module: sqlalchemy.orm.state [assertion]
      early skip of rewriting module: sqlalchemy.orm.loading [assertion]
      early skip of rewriting module: sqlalchemy.orm.strategy_options [assertion]
      early skip of rewriting module: sqlalchemy.orm.util [assertion]
      early skip of rewriting module: sqlalchemy.orm.properties [assertion]
      early skip of rewriting module: sqlalchemy.orm.deprecated_interfaces [assertion]
      early skip of rewriting module: sqlalchemy.orm.descriptor_props [assertion]
      early skip of rewriting module: sqlalchemy.orm.query [assertion]
      early skip of rewriting module: sqlalchemy.orm.persistence [assertion]
      early skip of rewriting module: sqlalchemy.orm.evaluator [assertion]
      early skip of rewriting module: sqlalchemy.orm.sync [assertion]
      early skip of rewriting module: sqlalchemy.orm.relationships [assertion]
      early skip of rewriting module: sqlalchemy.orm.dependency [assertion]
      early skip of rewriting module: sqlalchemy.orm.unitofwork [assertion]
      early skip of rewriting module: sqlalchemy.orm.scoping [assertion]
      early skip of rewriting module: sqlalchemy.orm.session [assertion]
      early skip of rewriting module: sqlalchemy.orm.identity [assertion]
      early skip of rewriting module: sqlalchemy.orm.dynamic [assertion]
      early skip of rewriting module: sqlalchemy.orm.strategies [assertion]
      early skip of rewriting module: sqlalchemy.orm.events [assertion]
      early skip of rewriting module: sqlalchemy.ext [assertion]
      early skip of rewriting module: sqlalchemy.ext.baked [assertion]
      early skip of rewriting module: harvester [assertion]
      early skip of rewriting module: harvester.db [assertion]
      early skip of rewriting module: harvester.models [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.base [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.pg8000 [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.json [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.psycopg2 [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.hstore [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.array [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.psycopg2cffi [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.pygresql [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.pypostgresql [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.zxjdbc [assertion]
      early skip of rewriting module: sqlalchemy.connectors [assertion]
      early skip of rewriting module: sqlalchemy.connectors.zxJDBC [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.dml [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.ext [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.ranges [assertion]
      early skip of rewriting module: sqlalchemy.ext.declarative [assertion]
      early skip of rewriting module: sqlalchemy.ext.declarative.api [assertion]
      early skip of rewriting module: sqlalchemy.ext.declarative.base [assertion]
      early skip of rewriting module: sqlalchemy.ext.declarative.clsregistry [assertion]
      early skip of rewriting module: harvester.utils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: logging
            obj: <module 'logging' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: futures
            obj: <module 'concurrent.futures' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/concurrent/futures/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: grpc
            obj: <module 'grpc' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/grpc/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: pytest
            obj: <module 'pytest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: AvroProducer
            obj: <class 'confluent_kafka.avro.AvroProducer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: Schema
            obj: <class 'confluent_kafka.schema_registry.schema_registry_client.Schema'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: patch
            obj: <function patch at 0x1040cf5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: AvroSerialHelper
            obj: <class 'API.avro_serializer.AvroSerialHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: harvester_grpc
            obj: <module 'API.grpc_modules.harvester_grpc' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/API/grpc_modules/harvester_grpc.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: get_schema
            obj: <function get_schema at 0x103e6f550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: Harvester
            obj: <class 'API.harvester_server.Harvester'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: Listener
            obj: <class 'API.harvester_server.Listener'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: Logging
            obj: <class 'API.harvester_server.Logging'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: db
            obj: <module 'harvester.db' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/harvester/db.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: base
            obj: <module 'tests.API.base' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/API/base.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: MockSchemaRegistryClient
            obj: <class 'tests.common.mockschemaregistryclient.MockSchemaRegistryClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: fake_db_entry
            obj: <class 'test_harvester_server.fake_db_entry'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/API/test_harvester_server.py>
            name: HarvesterServer
            obj: <class 'test_harvester_server.HarvesterServer'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HarvesterServer> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HarvesterServer> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HarvesterServer>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HarvesterServer>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer' lenresult=10 outcome='passed'> [hook]
    genitems <TestCaseFunction test_Harvester_server_bad_entry> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_bad_entry>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_init> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_init>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_init_persistence> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_init_persistence_error_db> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_init_persistence_error_redis> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_monitor> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_monitor>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_monitor_no_hash> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_monitor_persistent_error_db> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_Harvester_server_monitor_persistent_success> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/API/test_harvester_server.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/harvester/test_alembic.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
      find_module called for: test_alembic [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_alembic.py [assertion]
      early skip of rewriting module: alembic [assertion]
      early skip of rewriting module: alembic.context [assertion]
      early skip of rewriting module: alembic.runtime [assertion]
      early skip of rewriting module: alembic.runtime.environment [assertion]
      early skip of rewriting module: alembic.runtime.migration [assertion]
      early skip of rewriting module: alembic.ddl [assertion]
      early skip of rewriting module: alembic.ddl.mssql [assertion]
      early skip of rewriting module: sqlalchemy.ext.compiler [assertion]
      early skip of rewriting module: alembic.ddl.base [assertion]
      early skip of rewriting module: alembic.util [assertion]
      early skip of rewriting module: alembic.util.editor [assertion]
      early skip of rewriting module: alembic.util.compat [assertion]
      early skip of rewriting module: alembic.util.exc [assertion]
      early skip of rewriting module: alembic.util.langhelpers [assertion]
      early skip of rewriting module: alembic.util.messaging [assertion]
      early skip of rewriting module: alembic.util.sqla_compat [assertion]
      early skip of rewriting module: sqlalchemy.Identity [assertion]
      early skip of rewriting module: fcntl [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: alembic.util.pyfiles [assertion]
      early skip of rewriting module: mako [assertion]
      early skip of rewriting module: mako.exceptions [assertion]
      early skip of rewriting module: mako.compat [assertion]
      early skip of rewriting module: mako.util [assertion]
      early skip of rewriting module: timeit [assertion]
      early skip of rewriting module: mako.ext [assertion]
      early skip of rewriting module: mako.ext.pygmentplugin [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.formatters.html [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: ctags [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.lexers.agile [assertion]
      early skip of rewriting module: pygments.lexers.lisp [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.lexers._scheme_builtins [assertion]
      early skip of rewriting module: pygments.lexers.jvm [assertion]
      early skip of rewriting module: pygments.lexers.ruby [assertion]
      early skip of rewriting module: pygments.lexers.perl [assertion]
      early skip of rewriting module: pygments.lexers.d [assertion]
      early skip of rewriting module: pygments.lexers.iolang [assertion]
      early skip of rewriting module: pygments.lexers.tcl [assertion]
      early skip of rewriting module: pygments.lexers.factor [assertion]
      early skip of rewriting module: pygments.lexers.scripting [assertion]
      early skip of rewriting module: pygments.lexers.web [assertion]
      early skip of rewriting module: pygments.lexers.html [assertion]
      early skip of rewriting module: pygments.lexers.javascript [assertion]
      early skip of rewriting module: pygments.lexers.css [assertion]
      early skip of rewriting module: pygments.lexers._css_builtins [assertion]
      early skip of rewriting module: pygments.lexers.actionscript [assertion]
      early skip of rewriting module: pygments.lexers.php [assertion]
      early skip of rewriting module: pygments.lexers.webmisc [assertion]
      early skip of rewriting module: pygments.lexers.data [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: pygments.style [assertion]
      early skip of rewriting module: mako.template [assertion]
      early skip of rewriting module: mako.cache [assertion]
      early skip of rewriting module: mako.codegen [assertion]
      early skip of rewriting module: mako.ast [assertion]
      early skip of rewriting module: mako.pyparser [assertion]
      early skip of rewriting module: mako._ast_util [assertion]
      early skip of rewriting module: mako.filters [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: mako.parsetree [assertion]
      early skip of rewriting module: mako.pygen [assertion]
      early skip of rewriting module: mako.runtime [assertion]
      early skip of rewriting module: mako.lexer [assertion]
      early skip of rewriting module: alembic.ddl.impl [assertion]
      early skip of rewriting module: alembic.ddl.mysql [assertion]
      early skip of rewriting module: alembic.autogenerate [assertion]
      early skip of rewriting module: alembic.autogenerate.api [assertion]
      early skip of rewriting module: alembic.autogenerate.compare [assertion]
      early skip of rewriting module: alembic.autogenerate.render [assertion]
      early skip of rewriting module: alembic.operations [assertion]
      early skip of rewriting module: alembic.operations.toimpl [assertion]
      early skip of rewriting module: alembic.operations.ops [assertion]
      early skip of rewriting module: alembic.operations.schemaobj [assertion]
      early skip of rewriting module: alembic.operations.base [assertion]
      early skip of rewriting module: alembic.operations.batch [assertion]
      early skip of rewriting module: alembic.autogenerate.rewriter [assertion]
      early skip of rewriting module: alembic.ddl.oracle [assertion]
      early skip of rewriting module: alembic.ddl.postgresql [assertion]
      early skip of rewriting module: alembic.ddl.sqlite [assertion]
      early skip of rewriting module: alembic.op [assertion]
      early skip of rewriting module: alembic.config [assertion]
      early skip of rewriting module: alembic.command [assertion]
      early skip of rewriting module: alembic.script [assertion]
      early skip of rewriting module: alembic.script.base [assertion]
      early skip of rewriting module: alembic.script.revision [assertion]
      early skip of rewriting module: alembic.script.write_hooks [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
            name: Config
            obj: <class 'alembic.config.Config'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
            name: ScriptDirectory
            obj: <class 'alembic.script.base.ScriptDirectory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_alembic.py>
            name: test_only_single_head_revision_in_migrations
            obj: <function test_only_single_head_revision_in_migrations at 0x103bd2d30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1052a01c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_only_single_head_revision_in_migrations>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_alembic.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_only_single_head_revision_in_migrations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_only_single_head_revision_in_migrations>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_alembic.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
      find_module called for: test_base_OAIHarvester [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_base_OAIHarvester.py [assertion]
      early skip of rewriting module: requests_mock [assertion]
      early skip of rewriting module: requests_mock.adapter [assertion]
      early skip of rewriting module: six.moves.urllib [assertion]
      early skip of rewriting module: requests_mock.exceptions [assertion]
      early skip of rewriting module: requests_mock.response [assertion]
      early skip of rewriting module: requests_mock.compat [assertion]
      early skip of rewriting module: requests_mock.mocker [assertion]
      early skip of rewriting module: harvester.base [assertion]
      early skip of rewriting module: harvester.base.OAIHarvester [assertion]
      early skip of rewriting module: tests.harvester [assertion]
      early skip of rewriting module: tests.harvester.base [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: pytest
            obj: <module 'pytest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: requests_mock
            obj: <module 'requests_mock' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/requests_mock/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: OAI
            obj: <class 'harvester.base.OAIHarvester.OAIHarvester'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: MockGetRecord
            obj: <class 'tests.harvester.base.MockGetRecord'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: MockListIdentifiers
            obj: <class 'tests.harvester.base.MockListIdentifiers'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: MockListRecords
            obj: <class 'tests.harvester.base.MockListRecords'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_base_OAIHarvester.py>
            name: test_OAI_harvesting
            obj: <class 'test_base_OAIHarvester.test_OAI_harvesting'>
        finish pytest_pycollect_makeitem --> <UnitTestCase test_OAI_harvesting> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase test_OAI_harvesting> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase test_OAI_harvesting>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase test_OAI_harvesting>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_OAI_GetRecord> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_OAI_GetRecord>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_OAI_ListIdentifiers> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_OAI_ListIdentifiers>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_OAI_ListRecords> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_OAI_ListRecords>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_OAI_ListRecords_503> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_OAI_ListRecords_503>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/harvester/test_harvester.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
      find_module called for: test_harvester [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_harvester.py [assertion]
      early skip of rewriting module: base [assertion]
      early skip of rewriting module: harvester.metadata [assertion]
      early skip of rewriting module: harvester.metadata.arxiv_harvester [assertion]
      early skip of rewriting module: adsingestp [assertion]
      early skip of rewriting module: adsingestp.parsers [assertion]
      early skip of rewriting module: adsingestp.parsers.arxiv [assertion]
      early skip of rewriting module: adsingestp.utils [assertion]
      early skip of rewriting module: nameparser [assertion]
      early skip of rewriting module: nameparser.parser [assertion]
      early skip of rewriting module: nameparser.util [assertion]
      early skip of rewriting module: nameparser.config [assertion]
      early skip of rewriting module: nameparser.config.prefixes [assertion]
      early skip of rewriting module: nameparser.config.capitalization [assertion]
      early skip of rewriting module: nameparser.config.conjunctions [assertion]
      early skip of rewriting module: nameparser.config.suffixes [assertion]
      early skip of rewriting module: nameparser.config.titles [assertion]
      early skip of rewriting module: nameparser.config.regexes [assertion]
      early skip of rewriting module: adsingestp.ingest_exceptions [assertion]
      early skip of rewriting module: adsingestp.parsers.base [assertion]
      early skip of rewriting module: bs4 [assertion]
      early skip of rewriting module: bs4.builder [assertion]
      early skip of rewriting module: bs4.element [assertion]
      early skip of rewriting module: soupsieve [assertion]
      early skip of rewriting module: soupsieve.__meta__ [assertion]
      early skip of rewriting module: soupsieve.css_parser [assertion]
      early skip of rewriting module: soupsieve.util [assertion]
      early skip of rewriting module: soupsieve.css_match [assertion]
      early skip of rewriting module: soupsieve.css_types [assertion]
      early skip of rewriting module: soupsieve.pretty [assertion]
      early skip of rewriting module: bs4.formatter [assertion]
      early skip of rewriting module: bs4.dammit [assertion]
      early skip of rewriting module: cchardet [assertion]
      early skip of rewriting module: iconv_codec [assertion]
      early skip of rewriting module: bs4.builder._htmlparser [assertion]
      early skip of rewriting module: html.parser [assertion]
      early skip of rewriting module: _markupbase [assertion]
      early skip of rewriting module: bs4.builder._html5lib [assertion]
      early skip of rewriting module: html5lib [assertion]
      early skip of rewriting module: bs4.builder._lxml [assertion]
      early skip of rewriting module: lxml [assertion]
      early skip of rewriting module: lxml.etree [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: lxml._elementpath [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: rnc2rng [assertion]
      early skip of rewriting module: harvester.harvester [assertion]
      early skip of rewriting module: harvester.s3_methods [assertion]
      early skip of rewriting module: boto3 [assertion]
      early skip of rewriting module: boto3.compat [assertion]
      early skip of rewriting module: boto3.exceptions [assertion]
      early skip of rewriting module: botocore [assertion]
      early skip of rewriting module: botocore.exceptions [assertion]
      early skip of rewriting module: botocore.vendored [assertion]
      early skip of rewriting module: botocore.vendored.requests [assertion]
      early skip of rewriting module: botocore.vendored.requests.exceptions [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages.urllib3 [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages.urllib3.exceptions [assertion]
      early skip of rewriting module: boto3.session [assertion]
      early skip of rewriting module: botocore.session [assertion]
      early skip of rewriting module: botocore.client [assertion]
      early skip of rewriting module: botocore.waiter [assertion]
      early skip of rewriting module: jmespath [assertion]
      early skip of rewriting module: jmespath.parser [assertion]
      early skip of rewriting module: jmespath.lexer [assertion]
      early skip of rewriting module: jmespath.exceptions [assertion]
      early skip of rewriting module: jmespath.compat [assertion]
      early skip of rewriting module: jmespath.ast [assertion]
      early skip of rewriting module: jmespath.visitor [assertion]
      early skip of rewriting module: jmespath.functions [assertion]
      early skip of rewriting module: botocore.docs [assertion]
      early skip of rewriting module: botocore.docs.service [assertion]
      early skip of rewriting module: botocore.docs.bcdoc [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.restdoc [assertion]
      early skip of rewriting module: botocore.compat [assertion]
      early skip of rewriting module: botocore.vendored.six [assertion]
      early skip of rewriting module: xml.etree.cElementTree [assertion]
      early skip of rewriting module: awscrt [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.docstringparser [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.style [assertion]
      early skip of rewriting module: botocore.docs.client [assertion]
      early skip of rewriting module: botocore.docs.example [assertion]
      early skip of rewriting module: botocore.docs.shape [assertion]
      early skip of rewriting module: botocore.utils [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: botocore.awsrequest [assertion]
      early skip of rewriting module: botocore.httpsession [assertion]
      early skip of rewriting module: urllib3.contrib.pyopenssl [assertion]
      early skip of rewriting module: OpenSSL [assertion]
      early skip of rewriting module: botocore.docs.utils [assertion]
      early skip of rewriting module: botocore.docs.method [assertion]
      early skip of rewriting module: botocore.docs.params [assertion]
      early skip of rewriting module: botocore.docs.sharedexample [assertion]
      early skip of rewriting module: botocore.docs.paginator [assertion]
      early skip of rewriting module: botocore.docs.waiter [assertion]
      early skip of rewriting module: botocore.docs.docstring [assertion]
      early skip of rewriting module: botocore.args [assertion]
      early skip of rewriting module: botocore.parsers [assertion]
      early skip of rewriting module: botocore.eventstream [assertion]
      early skip of rewriting module: botocore.serialize [assertion]
      early skip of rewriting module: botocore.validate [assertion]
      early skip of rewriting module: botocore.config [assertion]
      early skip of rewriting module: botocore.endpoint [assertion]
      early skip of rewriting module: botocore.history [assertion]
      early skip of rewriting module: botocore.hooks [assertion]
      early skip of rewriting module: botocore.httpchecksum [assertion]
      early skip of rewriting module: botocore.response [assertion]
      early skip of rewriting module: botocore.regions [assertion]
      early skip of rewriting module: botocore.auth [assertion]
      early skip of rewriting module: botocore.crt [assertion]
      early skip of rewriting module: botocore.endpoint_provider [assertion]
      early skip of rewriting module: botocore.signers [assertion]
      early skip of rewriting module: botocore.discovery [assertion]
      early skip of rewriting module: botocore.model [assertion]
      early skip of rewriting module: botocore.paginate [assertion]
      early skip of rewriting module: botocore.retries [assertion]
      early skip of rewriting module: botocore.retries.adaptive [assertion]
      early skip of rewriting module: botocore.retries.bucket [assertion]
      early skip of rewriting module: botocore.retries.standard [assertion]
      early skip of rewriting module: botocore.retries.quota [assertion]
      early skip of rewriting module: botocore.retries.special [assertion]
      early skip of rewriting module: botocore.retries.base [assertion]
      early skip of rewriting module: botocore.retries.throttling [assertion]
      early skip of rewriting module: botocore.configloader [assertion]
      early skip of rewriting module: botocore.credentials [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: botocore.tokens [assertion]
      early skip of rewriting module: botocore.handlers [assertion]
      early skip of rewriting module: botocore.retryhandler [assertion]
      early skip of rewriting module: botocore.translate [assertion]
      early skip of rewriting module: botocore.monitoring [assertion]
      early skip of rewriting module: botocore.configprovider [assertion]
      early skip of rewriting module: botocore.errorfactory [assertion]
      early skip of rewriting module: botocore.loaders [assertion]
      early skip of rewriting module: boto3.utils [assertion]
      early skip of rewriting module: boto3.resources [assertion]
      early skip of rewriting module: boto3.resources.factory [assertion]
      early skip of rewriting module: boto3.docs [assertion]
      early skip of rewriting module: boto3.docs.service [assertion]
      early skip of rewriting module: boto3.docs.client [assertion]
      early skip of rewriting module: boto3.docs.resource [assertion]
      early skip of rewriting module: boto3.docs.action [assertion]
      early skip of rewriting module: boto3.docs.base [assertion]
      early skip of rewriting module: boto3.docs.method [assertion]
      early skip of rewriting module: boto3.docs.utils [assertion]
      early skip of rewriting module: boto3.docs.attr [assertion]
      early skip of rewriting module: boto3.docs.collection [assertion]
      early skip of rewriting module: boto3.docs.subresource [assertion]
      early skip of rewriting module: boto3.docs.waiter [assertion]
      early skip of rewriting module: boto3.docs.docstring [assertion]
      early skip of rewriting module: boto3.resources.action [assertion]
      early skip of rewriting module: boto3.resources.model [assertion]
      early skip of rewriting module: boto3.resources.params [assertion]
      early skip of rewriting module: boto3.resources.response [assertion]
      early skip of rewriting module: boto3.resources.base [assertion]
      early skip of rewriting module: boto3.resources.collection [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: base
            obj: <module 'base' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: AvroProducer
            obj: <class 'confluent_kafka.avro.AvroProducer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: patch
            obj: <function patch at 0x1040cf5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: arxiv_harvester
            obj: <module 'harvester.metadata.arxiv_harvester' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/harvester/metadata/arxiv_harvester.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: db
            obj: <module 'harvester.db' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/harvester/db.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: Harvester_APP
            obj: <class 'harvester.harvester.Harvester_APP'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: MockSchemaRegistryClient
            obj: <class 'tests.common.mockschemaregistryclient.MockSchemaRegistryClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_harvester.py>
            name: test_harvester
            obj: <class 'test_harvester.test_harvester'>
        finish pytest_pycollect_makeitem --> <UnitTestCase test_harvester> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase test_harvester> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase test_harvester>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase test_harvester>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_harvester_task> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_harvester_task>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_harvester.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
      find_module called for: test_metadata_arxiv_harvester [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py [assertion]
      early skip of rewriting module: moto [assertion]
      early skip of rewriting module: moto.s3 [assertion]
      early skip of rewriting module: moto.s3.models [assertion]
      early skip of rewriting module: moto.core [assertion]
      early skip of rewriting module: moto.core.models [assertion]
      early skip of rewriting module: responses [assertion]
      early skip of rewriting module: responses.matchers [assertion]
      early skip of rewriting module: responses.registries [assertion]
      early skip of rewriting module: typing_extensions [assertion]
      early skip of rewriting module: moto.settings [assertion]
      early skip of rewriting module: moto.core.base_backend [assertion]
      early skip of rewriting module: moto.core.model_instances [assertion]
      early skip of rewriting module: moto.core.utils [assertion]
      early skip of rewriting module: moto.core.common_types [assertion]
      early skip of rewriting module: moto.core.botocore_stubber [assertion]
      early skip of rewriting module: moto.core.exceptions [assertion]
      early skip of rewriting module: werkzeug [assertion]
      early skip of rewriting module: werkzeug.serving [assertion]
      early skip of rewriting module: socketserver [assertion]
      early skip of rewriting module: http.server [assertion]
      early skip of rewriting module: werkzeug._internal [assertion]
      early skip of rewriting module: werkzeug.exceptions [assertion]
      early skip of rewriting module: werkzeug.urls [assertion]
      early skip of rewriting module: werkzeug.test [assertion]
      early skip of rewriting module: werkzeug.datastructures [assertion]
      early skip of rewriting module: werkzeug.http [assertion]
      early skip of rewriting module: werkzeug.sansio [assertion]
      early skip of rewriting module: werkzeug.sansio.http [assertion]
      early skip of rewriting module: werkzeug.sansio.multipart [assertion]
      early skip of rewriting module: werkzeug.utils [assertion]
      early skip of rewriting module: werkzeug.security [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: werkzeug.wsgi [assertion]
      early skip of rewriting module: werkzeug.sansio.utils [assertion]
      early skip of rewriting module: werkzeug.wrappers [assertion]
      early skip of rewriting module: werkzeug.wrappers.request [assertion]
      early skip of rewriting module: werkzeug.formparser [assertion]
      early skip of rewriting module: werkzeug.sansio.request [assertion]
      early skip of rewriting module: werkzeug.user_agent [assertion]
      early skip of rewriting module: werkzeug.wrappers.response [assertion]
      early skip of rewriting module: werkzeug.sansio.response [assertion]
      early skip of rewriting module: moto.core.responses [assertion]
      early skip of rewriting module: xmltodict [assertion]
      early skip of rewriting module: defusedexpat [assertion]
      early skip of rewriting module: xml.sax [assertion]
      early skip of rewriting module: xml.sax.xmlreader [assertion]
      early skip of rewriting module: xml.sax.handler [assertion]
      early skip of rewriting module: xml.sax._exceptions [assertion]
      early skip of rewriting module: xml.sax.saxutils [assertion]
      early skip of rewriting module: cStringIO [assertion]
      early skip of rewriting module: StringIO [assertion]
      early skip of rewriting module: moto.utilities [assertion]
      early skip of rewriting module: moto.utilities.utils [assertion]
      early skip of rewriting module: moto.core.custom_responses_mock [assertion]
      early skip of rewriting module: moto.utilities.distutils_version [assertion]
      early skip of rewriting module: moto.core.responses_custom_registry [assertion]
      early skip of rewriting module: moto.core.common_models [assertion]
      early skip of rewriting module: moto.cloudwatch [assertion]
      early skip of rewriting module: moto.cloudwatch.models [assertion]
      early skip of rewriting module: moto.moto_api [assertion]
      early skip of rewriting module: moto.moto_api._internal [assertion]
      early skip of rewriting module: moto.moto_api._internal.models [assertion]
      early skip of rewriting module: moto.moto_api._internal.state_manager [assertion]
      early skip of rewriting module: moto.moto_api._internal.recorder [assertion]
      early skip of rewriting module: moto.moto_api._internal.recorder.models [assertion]
      early skip of rewriting module: moto.moto_api._internal.moto_random [assertion]
      early skip of rewriting module: moto.cloudwatch.exceptions [assertion]
      early skip of rewriting module: moto.cloudwatch.utils [assertion]
      early skip of rewriting module: moto.utilities.tagging_service [assertion]
      early skip of rewriting module: moto.moto_api._internal.managed_state_model [assertion]
      early skip of rewriting module: moto.s3.exceptions [assertion]
      early skip of rewriting module: moto.s3.cloud_formation [assertion]
      early skip of rewriting module: moto.s3.notifications [assertion]
      early skip of rewriting module: moto.s3.utils [assertion]
      early skip of rewriting module: moto.events [assertion]
      early skip of rewriting module: moto.events.models [assertion]
      early skip of rewriting module: moto.events.exceptions [assertion]
      early skip of rewriting module: moto.utilities.paginator [assertion]
      early skip of rewriting module: moto.events.utils [assertion]
      early skip of rewriting module: moto.events.notifications [assertion]
      early skip of rewriting module: moto.instance_metadata [assertion]
      early skip of rewriting module: moto.instance_metadata.models [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: pickle
            obj: <module 'pickle' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/pickle.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: boto3
            obj: <module 'boto3' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/boto3/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: moto
            obj: <module 'moto' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/moto/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: pytest
            obj: <module 'pytest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: requests
            obj: <module 'requests' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/requests/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: MockListRecords
            obj: <class 'base.MockListRecords'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: AvroProducer
            obj: <class 'confluent_kafka.avro.AvroProducer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: patch
            obj: <function patch at 0x1040cf5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: db
            obj: <module 'harvester.db' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/harvester/db.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: utils
            obj: <module 'harvester.utils' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/harvester/utils.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: Harvester_APP
            obj: <class 'harvester.harvester.Harvester_APP'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: ArXiV_Harvester
            obj: <class 'harvester.metadata.arxiv_harvester.ArXiV_Harvester'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: arxiv_harvesting
            obj: <function arxiv_harvesting at 0x105895d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: MockSchemaRegistryClient
            obj: <class 'tests.common.mockschemaregistryclient.MockSchemaRegistryClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: base
            obj: <module 'tests.harvester.base' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/base.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: empty_bucket
            obj: <function empty_bucket at 0x106e04040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py>
            name: test_ArXiV_Harvester
            obj: <class 'test_metadata_arxiv_harvester.test_ArXiV_Harvester'>
        finish pytest_pycollect_makeitem --> <UnitTestCase test_ArXiV_Harvester> [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase test_ArXiV_Harvester> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase test_ArXiV_Harvester>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase test_ArXiV_Harvester>
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_arxiv_harvester_from> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arxiv_harvester_from>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_arxiv_harvester_generator> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arxiv_harvester_generator>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_arxiv_harvester_resumptionToken> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_arxiv_harvesting_main> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arxiv_harvesting_main>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module SciXHarvester/tests/harvester/test_s3.py> [collection]
      pytest_collectstart [hook]
          collector: <Module SciXHarvester/tests/harvester/test_s3.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module SciXHarvester/tests/harvester/test_s3.py>
      find_module called for: test_s3 [assertion]
      matched test file '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py' [assertion]
      found cached rewritten pyc for /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/SciXHarvester/tests/harvester/test_s3.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: os
            obj: <module 'os' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: patch
            obj: <function patch at 0x1028e7040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: boto3
            obj: <module 'boto3' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/boto3/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: moto
            obj: <module 'moto' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/moto/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: pytest
            obj: <module 'pytest' from '/Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline/.venv/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: ParamValidationError
            obj: <class 'botocore.exceptions.ParamValidationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: load_s3
            obj: <class 'harvester.s3_methods.load_s3'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: empty_bucket
            obj: <function empty_bucket at 0x1078a6820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: test_upload_object
            obj: <function test_upload_object at 0x1078a6790>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1078ad7c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_upload_object>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: test_upload_nonbytes_object
            obj: <function test_upload_nonbytes_object at 0x1078a68b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1078ad8b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_upload_nonbytes_object>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module SciXHarvester/tests/harvester/test_s3.py>
            name: test_alternate_s3_endpoint_put_object
            obj: <function test_alternate_s3_endpoint_put_object at 0x1078a6a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1078ad9d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_alternate_s3_endpoint_put_object>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'SciXHarvester/tests/harvester/test_s3.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_upload_object> [collection]
      pytest_itemcollected [hook]
          item: <Function test_upload_object>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_upload_nonbytes_object> [collection]
      pytest_itemcollected [hook]
          item: <Function test_upload_nonbytes_object>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_alternate_s3_endpoint_put_object> [collection]
      pytest_itemcollected [hook]
          item: <Function test_alternate_s3_endpoint_put_object>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'SciXHarvester/tests/harvester/test_s3.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x101697d00>
          items: [<TestCaseFunction test_avro_deserialization>, <TestCaseFunction test_avro_serialization>, <TestCaseFunction test_get_schema>, <TestCaseFunction test_get_schema_failure>, <TestCaseFunction test_input_parser>, <TestCaseFunction test_Harvester_server_bad_entry>, <TestCaseFunction test_Harvester_server_init>, <TestCaseFunction test_Harvester_server_init_persistence>, <TestCaseFunction test_Harvester_server_init_persistence_error_db>, <TestCaseFunction test_Harvester_server_init_persistence_error_redis>, <TestCaseFunction test_Harvester_server_monitor>, <TestCaseFunction test_Harvester_server_monitor_no_hash>, <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>, <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>, <TestCaseFunction test_Harvester_server_monitor_persistent_success>, <Function test_only_single_head_revision_in_migrations>, <TestCaseFunction test_OAI_GetRecord>, <TestCaseFunction test_OAI_ListIdentifiers>, <TestCaseFunction test_OAI_ListRecords>, <TestCaseFunction test_OAI_ListRecords_503>, <TestCaseFunction test_harvester_task>, <TestCaseFunction test_arxiv_harvester_from>, <TestCaseFunction test_arxiv_harvester_generator>, <TestCaseFunction test_arxiv_harvester_resumptionToken>, <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>, <TestCaseFunction test_arxiv_harvesting_main>, <Function test_upload_object>, <Function test_upload_nonbytes_object>, <Function test_alternate_s3_endpoint_put_object>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x101697d00>
            items: [<TestCaseFunction test_avro_deserialization>, <TestCaseFunction test_avro_serialization>, <TestCaseFunction test_get_schema>, <TestCaseFunction test_get_schema_failure>, <TestCaseFunction test_input_parser>, <TestCaseFunction test_Harvester_server_bad_entry>, <TestCaseFunction test_Harvester_server_init>, <TestCaseFunction test_Harvester_server_init_persistence>, <TestCaseFunction test_Harvester_server_init_persistence_error_db>, <TestCaseFunction test_Harvester_server_init_persistence_error_redis>, <TestCaseFunction test_Harvester_server_monitor>, <TestCaseFunction test_Harvester_server_monitor_no_hash>, <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>, <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>, <TestCaseFunction test_Harvester_server_monitor_persistent_success>, <Function test_only_single_head_revision_in_migrations>, <TestCaseFunction test_OAI_GetRecord>, <TestCaseFunction test_OAI_ListIdentifiers>, <TestCaseFunction test_OAI_ListRecords>, <TestCaseFunction test_OAI_ListRecords_503>, <TestCaseFunction test_harvester_task>, <TestCaseFunction test_arxiv_harvester_from>, <TestCaseFunction test_arxiv_harvester_generator>, <TestCaseFunction test_arxiv_harvester_resumptionToken>, <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>, <TestCaseFunction test_arxiv_harvesting_main>, <Function test_upload_object>, <Function test_upload_nonbytes_object>, <Function test_alternate_s3_endpoint_put_object>]
            start_path: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline
            startdir: /Users/sao/ADS_repos/backoffice/SciXPipelines/SciXHarvesterPipeline
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session SciXHarvesterPipeline exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=29>
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_avro_deserialization>
          nextitem: <TestCaseFunction test_avro_serialization>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization
            location: ('SciXHarvester/tests/API/test_avro_serializer.py', 16, 'TestAvroSerializer.test_avro_deserialization')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_avro_deserialization>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestAvroSerializer' scope='class' baseid='SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestAvroSerializer' for <TestCaseFunction test_avro_deserialization>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_deserialization>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_avro_deserialization>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_deserialization>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_avro_deserialization>
            nextitem: <TestCaseFunction test_avro_serialization>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_deserialization>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_deserialization
            location: ('SciXHarvester/tests/API/test_avro_serializer.py', 16, 'TestAvroSerializer.test_avro_deserialization')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_avro_serialization>
          nextitem: <TestCaseFunction test_get_schema>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization
            location: ('SciXHarvester/tests/API/test_avro_serializer.py', 8, 'TestAvroSerializer.test_avro_serialization')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_avro_serialization>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_serialization>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_avro_serialization>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_serialization>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_avro_serialization>
            nextitem: <TestCaseFunction test_get_schema>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestAvroSerializer' scope='class' baseid='SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestAvroSerializer' for <TestCaseFunction test_avro_serialization>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestAvroSerializer' scope='class' baseid='SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestAvroSerializer' for <TestCaseFunction test_avro_deserialization>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_avro_serialization>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_avro_serializer.py::TestAvroSerializer::test_avro_serialization
            location: ('SciXHarvester/tests/API/test_avro_serializer.py', 8, 'TestAvroSerializer.test_avro_serialization')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_schema>
          nextitem: <TestCaseFunction test_get_schema_failure>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 11, 'TestHarvesterClient.test_get_schema')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_schema>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestHarvesterClient' scope='class' baseid='SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestHarvesterClient' for <TestCaseFunction test_get_schema>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_schema>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_schema>
            nextitem: <TestCaseFunction test_get_schema_failure>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 11, 'TestHarvesterClient.test_get_schema')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_schema_failure>
          nextitem: <TestCaseFunction test_input_parser>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 22, 'TestHarvesterClient.test_get_schema_failure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_schema_failure>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema_failure>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_schema_failure>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema_failure>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_schema_failure>
            nextitem: <TestCaseFunction test_input_parser>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_schema_failure>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_get_schema_failure
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 22, 'TestHarvesterClient.test_get_schema_failure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_input_parser>
          nextitem: <TestCaseFunction test_Harvester_server_bad_entry>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 28, 'TestHarvesterClient.test_input_parser')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_input_parser>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_input_parser>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_input_parser>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_input_parser>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_input_parser>
            nextitem: <TestCaseFunction test_Harvester_server_bad_entry>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestHarvesterClient' scope='class' baseid='SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestHarvesterClient' for <TestCaseFunction test_input_parser>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestHarvesterClient' scope='class' baseid='SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestHarvesterClient' for <TestCaseFunction test_get_schema_failure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_TestHarvesterClient' scope='class' baseid='SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient'>
              request: <SubRequest '_unittest_setUpClass_fixture_TestHarvesterClient' for <TestCaseFunction test_get_schema>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_input_parser>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_client.py::TestHarvesterClient::test_input_parser
            location: ('SciXHarvester/tests/API/test_harvester_client.py', 28, 'TestHarvesterClient.test_input_parser')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_bad_entry>
          nextitem: <TestCaseFunction test_Harvester_server_init>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 67, 'HarvesterServer.test_Harvester_server_bad_entry')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_bad_entry>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
        early skip of rewriting module: concurrent.futures.thread [assertion]
        early skip of rewriting module: grpc._server [assertion]
        early skip of rewriting module: grpc._interceptor [assertion]
        early skip of rewriting module: psycopg2 [assertion]
        early skip of rewriting module: psycopg2._psycopg [assertion]
        early skip of rewriting module: psycopg2.errors [assertion]
        early skip of rewriting module: psycopg2.extensions [assertion]
        early skip of rewriting module: psycopg2._json [assertion]
        early skip of rewriting module: psycopg2._range [assertion]
        early skip of rewriting module: psycopg2.extras [assertion]
        early skip of rewriting module: psycopg2._ipaddress [assertion]
        early skip of rewriting module: grpc._utilities [assertion]
        early skip of rewriting module: grpc._channel [assertion]
        early skip of rewriting module: grpc.experimental [assertion]
        early skip of rewriting module: grpc._simple_stubs [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
            nextitem: <TestCaseFunction test_Harvester_server_init>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_bad_entry>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_bad_entry
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 67, 'HarvesterServer.test_Harvester_server_bad_entry')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_init>
          nextitem: <TestCaseFunction test_Harvester_server_init_persistence>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 75, 'HarvesterServer.test_Harvester_server_init')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_init>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_init>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_init>
            nextitem: <TestCaseFunction test_Harvester_server_init_persistence>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 75, 'HarvesterServer.test_Harvester_server_init')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence>
          nextitem: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 95, 'HarvesterServer.test_Harvester_server_init_persistence')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
            nextitem: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 95, 'HarvesterServer.test_Harvester_server_init_persistence')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
          nextitem: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 159, 'HarvesterServer.test_Harvester_server_init_persistence_error_db')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
            nextitem: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_db>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_db
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 159, 'HarvesterServer.test_Harvester_server_init_persistence_error_db')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
          nextitem: <TestCaseFunction test_Harvester_server_monitor>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 127, 'HarvesterServer.test_Harvester_server_init_persistence_error_redis')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
            nextitem: <TestCaseFunction test_Harvester_server_monitor>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_init_persistence_error_redis>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_init_persistence_error_redis
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 127, 'HarvesterServer.test_Harvester_server_init_persistence_error_redis')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_monitor>
          nextitem: <TestCaseFunction test_Harvester_server_monitor_no_hash>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 191, 'HarvesterServer.test_Harvester_server_monitor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
            nextitem: <TestCaseFunction test_Harvester_server_monitor_no_hash>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 191, 'HarvesterServer.test_Harvester_server_monitor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
          nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 291, 'HarvesterServer.test_Harvester_server_monitor_no_hash')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
            nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_no_hash>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_no_hash
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 291, 'HarvesterServer.test_Harvester_server_monitor_no_hash')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
          nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 237, 'HarvesterServer.test_Harvester_server_monitor_persistent_error_db')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
            nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_db
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 237, 'HarvesterServer.test_Harvester_server_monitor_persistent_error_db')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
          nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 263, 'HarvesterServer.test_Harvester_server_monitor_persistent_error_redis')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
            nextitem: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_error_redis
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 263, 'HarvesterServer.test_Harvester_server_monitor_persistent_error_redis')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
          nextitem: <Function test_only_single_head_revision_in_migrations>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 211, 'HarvesterServer.test_Harvester_server_monitor_persistent_success')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
            nextitem: <Function test_only_single_head_revision_in_migrations>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_monitor_persistent_success>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_monitor_persistent_error_redis>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_monitor_persistent_error_db>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_monitor_no_hash>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_monitor>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_init_persistence_error_redis>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_init_persistence_error_db>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_init_persistence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_init>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_HarvesterServer' scope='class' baseid='SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer'>
              request: <SubRequest '_unittest_setUpClass_fixture_HarvesterServer' for <TestCaseFunction test_Harvester_server_bad_entry>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_Harvester_server_monitor_persistent_success>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/API/test_harvester_server.py::HarvesterServer::test_Harvester_server_monitor_persistent_success
            location: ('SciXHarvester/tests/API/test_harvester_server.py', 211, 'HarvesterServer.test_Harvester_server_monitor_persistent_success')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_only_single_head_revision_in_migrations>
          nextitem: <TestCaseFunction test_OAI_GetRecord>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations
            location: ('SciXHarvester/tests/harvester/test_alembic.py', 4, 'test_only_single_head_revision_in_migrations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_only_single_head_revision_in_migrations>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_only_single_head_revision_in_migrations>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_only_single_head_revision_in_migrations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_only_single_head_revision_in_migrations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_only_single_head_revision_in_migrations>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_only_single_head_revision_in_migrations>
            nextitem: <TestCaseFunction test_OAI_GetRecord>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_only_single_head_revision_in_migrations>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_alembic.py::test_only_single_head_revision_in_migrations
            location: ('SciXHarvester/tests/harvester/test_alembic.py', 4, 'test_only_single_head_revision_in_migrations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_OAI_GetRecord>
          nextitem: <TestCaseFunction test_OAI_ListIdentifiers>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 10, 'test_OAI_harvesting.test_OAI_GetRecord')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_OAI_harvesting' scope='class' baseid='SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_OAI_harvesting' for <TestCaseFunction test_OAI_GetRecord>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
        early skip of rewriting module: netrc [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
            nextitem: <TestCaseFunction test_OAI_ListIdentifiers>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_GetRecord>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_GetRecord
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 10, 'test_OAI_harvesting.test_OAI_GetRecord')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_OAI_ListIdentifiers>
          nextitem: <TestCaseFunction test_OAI_ListRecords>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 63, 'test_OAI_harvesting.test_OAI_ListIdentifiers')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
            nextitem: <TestCaseFunction test_OAI_ListRecords>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListIdentifiers>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListIdentifiers
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 63, 'test_OAI_harvesting.test_OAI_ListIdentifiers')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_OAI_ListRecords>
          nextitem: <TestCaseFunction test_OAI_ListRecords_503>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 20, 'test_OAI_harvesting.test_OAI_ListRecords')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
            nextitem: <TestCaseFunction test_OAI_ListRecords_503>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 20, 'test_OAI_harvesting.test_OAI_ListRecords')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_OAI_ListRecords_503>
          nextitem: <TestCaseFunction test_harvester_task>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 52, 'test_OAI_harvesting.test_OAI_ListRecords_503')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
            nextitem: <TestCaseFunction test_harvester_task>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_OAI_harvesting' scope='class' baseid='SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_OAI_harvesting' for <TestCaseFunction test_OAI_ListRecords_503>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_OAI_harvesting' scope='class' baseid='SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_OAI_harvesting' for <TestCaseFunction test_OAI_ListRecords>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_OAI_harvesting' scope='class' baseid='SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_OAI_harvesting' for <TestCaseFunction test_OAI_ListIdentifiers>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_OAI_harvesting' scope='class' baseid='SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_OAI_harvesting' for <TestCaseFunction test_OAI_GetRecord>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_OAI_ListRecords_503>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_base_OAIHarvester.py::test_OAI_harvesting::test_OAI_ListRecords_503
            location: ('SciXHarvester/tests/harvester/test_base_OAIHarvester.py', 52, 'test_OAI_harvesting.test_OAI_ListRecords_503')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_harvester_task>
          nextitem: <TestCaseFunction test_arxiv_harvester_from>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task
            location: ('SciXHarvester/tests/harvester/test_harvester.py', 13, 'test_harvester.test_harvester_task')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_harvester_task>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_harvester.py::test_harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_harvester' for <TestCaseFunction test_harvester_task>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_harvester_task>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_harvester_task>
        early skip of rewriting module: boto3.s3 [assertion]
        early skip of rewriting module: boto3.s3.inject [assertion]
        early skip of rewriting module: boto3.s3.transfer [assertion]
        early skip of rewriting module: s3transfer [assertion]
        early skip of rewriting module: s3transfer.compat [assertion]
        early skip of rewriting module: multiprocessing.managers [assertion]
        early skip of rewriting module: multiprocessing.connection [assertion]
        early skip of rewriting module: _multiprocessing [assertion]
        early skip of rewriting module: multiprocessing.util [assertion]
        early skip of rewriting module: _winapi [assertion]
        early skip of rewriting module: multiprocessing.pool [assertion]
        early skip of rewriting module: multiprocessing.shared_memory [assertion]
        early skip of rewriting module: mmap [assertion]
        early skip of rewriting module: _posixshmem [assertion]
        early skip of rewriting module: s3transfer.exceptions [assertion]
        early skip of rewriting module: s3transfer.futures [assertion]
        early skip of rewriting module: s3transfer.utils [assertion]
        early skip of rewriting module: s3transfer.manager [assertion]
        early skip of rewriting module: s3transfer.bandwidth [assertion]
        early skip of rewriting module: s3transfer.constants [assertion]
        early skip of rewriting module: s3transfer.copies [assertion]
        early skip of rewriting module: s3transfer.tasks [assertion]
        early skip of rewriting module: s3transfer.delete [assertion]
        early skip of rewriting module: s3transfer.download [assertion]
        early skip of rewriting module: s3transfer.upload [assertion]
        early skip of rewriting module: s3transfer.subscribers [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_harvester_task>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_harvester_task>
            nextitem: <TestCaseFunction test_arxiv_harvester_from>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_harvester.py::test_harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_harvester' for <TestCaseFunction test_harvester_task>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_harvester_task>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_harvester.py::test_harvester::test_harvester_task
            location: ('SciXHarvester/tests/harvester/test_harvester.py', 13, 'test_harvester.test_harvester_task')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_arxiv_harvester_from>
          nextitem: <TestCaseFunction test_arxiv_harvester_generator>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 34, 'test_ArXiV_Harvester.test_arxiv_harvester_from')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvester_from>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
            nextitem: <TestCaseFunction test_arxiv_harvester_generator>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_from>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_from
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 34, 'test_ArXiV_Harvester.test_arxiv_harvester_from')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_arxiv_harvester_generator>
          nextitem: <TestCaseFunction test_arxiv_harvester_resumptionToken>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 69, 'test_ArXiV_Harvester.test_arxiv_harvester_generator')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
            nextitem: <TestCaseFunction test_arxiv_harvester_resumptionToken>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_generator>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_generator
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 69, 'test_ArXiV_Harvester.test_arxiv_harvester_generator')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
          nextitem: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 47, 'test_ArXiV_Harvester.test_arxiv_harvester_resumptionToken')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
            nextitem: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 47, 'test_ArXiV_Harvester.test_arxiv_harvester_resumptionToken')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
          nextitem: <TestCaseFunction test_arxiv_harvesting_main>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 60, 'test_ArXiV_Harvester.test_arxiv_harvester_resumptionToken_retry_after')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
            nextitem: <TestCaseFunction test_arxiv_harvesting_main>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvester_resumptionToken_retry_after
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 60, 'test_ArXiV_Harvester.test_arxiv_harvester_resumptionToken_retry_after')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_arxiv_harvesting_main>
          nextitem: <Function test_upload_object>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 84, 'test_ArXiV_Harvester.test_arxiv_harvesting_main')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.responses [assertion]
        early skip of rewriting module: moto.s3bucket_path [assertion]
        early skip of rewriting module: moto.s3bucket_path.utils [assertion]
        early skip of rewriting module: moto.utilities.aws_headers [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.instance_metadata.urls [assertion]
        early skip of rewriting module: moto.instance_metadata.responses [assertion]
        early skip of rewriting module: moto.moto_api._internal.urls [assertion]
        early skip of rewriting module: moto.moto_api._internal.responses [assertion]
        early skip of rewriting module: moto.moto_api._internal.recorder.responses [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.s3.urls [assertion]
        early skip of rewriting module: moto.iam [assertion]
        early skip of rewriting module: moto.iam.models [assertion]
        early skip of rewriting module: cryptography.x509 [assertion]
        early skip of rewriting module: cryptography.x509.certificate_transparency [assertion]
        early skip of rewriting module: cryptography.hazmat [assertion]
        early skip of rewriting module: cryptography.hazmat.bindings [assertion]
        early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
        early skip of rewriting module: _cffi_backend [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
        early skip of rewriting module: cryptography.exceptions [assertion]
        early skip of rewriting module: cryptography.x509.base [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dh [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.types [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
        early skip of rewriting module: cryptography.hazmat._oid [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed448 [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x448 [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x25519 [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
        early skip of rewriting module: bcrypt [assertion]
        early skip of rewriting module: cryptography.x509.extensions [assertion]
        early skip of rewriting module: cryptography.hazmat.primitives.constant_time [assertion]
        early skip of rewriting module: cryptography.x509.general_name [assertion]
        early skip of rewriting module: cryptography.x509.name [assertion]
        early skip of rewriting module: cryptography.x509.oid [assertion]
        early skip of rewriting module: cryptography.hazmat.backends [assertion]
        early skip of rewriting module: moto.iam.policy_validation [assertion]
        early skip of rewriting module: moto.iam.exceptions [assertion]
        early skip of rewriting module: moto.iam.aws_managed_policies [assertion]
        early skip of rewriting module: moto.iam.utils [assertion]
        early skip of rewriting module: _strptime [assertion]
        early skip of rewriting module: encodings.unicode_escape [assertion]
        early skip of rewriting module: moto.iam.access_control [assertion]
        early skip of rewriting module: moto.sts [assertion]
        early skip of rewriting module: moto.sts.models [assertion]
        early skip of rewriting module: moto.sts.utils [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
            nextitem: <Function test_upload_object>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvesting_main>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvester_resumptionToken_retry_after>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvester_resumptionToken>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvester_generator>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_unittest_setUpClass_fixture_test_ArXiV_Harvester' scope='class' baseid='SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester'>
              request: <SubRequest '_unittest_setUpClass_fixture_test_ArXiV_Harvester' for <TestCaseFunction test_arxiv_harvester_from>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_arxiv_harvesting_main>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py::test_ArXiV_Harvester::test_arxiv_harvesting_main
            location: ('SciXHarvester/tests/harvester/test_metadata_arxiv_harvester.py', 84, 'test_ArXiV_Harvester.test_arxiv_harvesting_main')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_upload_object>
          nextitem: <Function test_upload_nonbytes_object>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_upload_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 26, 'test_upload_object')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_upload_object>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='empty_bucket' scope='function' baseid='SciXHarvester/tests/harvester/test_s3.py'>
              request: <SubRequest 'empty_bucket' for <Function test_upload_object>>
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          finish pytest_fixture_setup --> s3.ServiceResource() [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_object>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_upload_object>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_upload_object>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_object>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_upload_object>
            nextitem: <Function test_upload_nonbytes_object>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='empty_bucket' scope='function' baseid='SciXHarvester/tests/harvester/test_s3.py'>
              request: <SubRequest 'empty_bucket' for <Function test_upload_object>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_object>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_object' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_upload_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 26, 'test_upload_object')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_upload_nonbytes_object>
          nextitem: <Function test_alternate_s3_endpoint_put_object>
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 38, 'test_upload_nonbytes_object')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_upload_nonbytes_object>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='empty_bucket' scope='function' baseid='SciXHarvester/tests/harvester/test_s3.py'>
              request: <SubRequest 'empty_bucket' for <Function test_upload_nonbytes_object>>
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          finish pytest_fixture_setup --> s3.ServiceResource() [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_nonbytes_object>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_upload_nonbytes_object>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_upload_nonbytes_object>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_nonbytes_object>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_upload_nonbytes_object>
            nextitem: <Function test_alternate_s3_endpoint_put_object>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='empty_bucket' scope='function' baseid='SciXHarvester/tests/harvester/test_s3.py'>
              request: <SubRequest 'empty_bucket' for <Function test_upload_nonbytes_object>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_upload_nonbytes_object>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_upload_nonbytes_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 38, 'test_upload_nonbytes_object')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_alternate_s3_endpoint_put_object>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 51, 'test_alternate_s3_endpoint_put_object')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_alternate_s3_endpoint_put_object>
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          early skip of rewriting module: moto.s3.urls [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_alternate_s3_endpoint_put_object>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101697d00>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: SciXHarvester/tests/harvester/test_s3.py::test_alternate_s3_endpoint_put_object
            location: ('SciXHarvester/tests/harvester/test_s3.py', 51, 'test_alternate_s3_endpoint_put_object')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session SciXHarvesterPipeline exitstatus=0 testsfailed=0 testscollected=29>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x103ba2640>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x101697d00>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x101697d00>
    finish pytest_unconfigure --> [] [hook]
